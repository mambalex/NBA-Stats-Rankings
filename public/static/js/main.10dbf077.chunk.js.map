{"version":3,"sources":["nba_logo.png","components/Rank/RankItem.js","components/Rank/Points.js","components/Rank/Assists.js","components/Rank/Rebounds.js","components/Player/Player.js","components/Rank/Rank.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RankItem","player","playerId","enName","pic","openModal","numName","className","style","paddingBottom","src","alt","display","height","slice","onClick","PPG_QUERY","gql","PointRank","query","loading","error","data","console","log","ppgRank","map","key","APG_QUERY","AssistRank","apgRank","RPG_QUERY","ReboundRank","rpgRank","PLAYER_QUERY","Player","id","closeModal","variables","role","type","data-dismiss","aria-label","playerBaseInfo","picFromSIB","birthDate","weight","jerseyNum","playerSeasonStat","pointsPG","assistsPG","reboundsPG","Rank","state","points","assists","rebounds","changeTab","tab","newState","setState","this","classnames","active","Component","client","ApolloClient","uri","App","logo","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,sC,2RCoC5BC,EAlCE,SAAC,GAKX,IAJLC,EAII,EAJJA,OAII,IAHJA,OAAUC,EAGN,EAHMA,SAAUC,EAGhB,EAHgBA,OAAQC,EAGxB,EAHwBA,IAC5BC,EAEI,EAFJA,UACAC,EACI,EADJA,QAEA,OACE,yBAAKC,UAAU,sBAAsBC,MAAO,CAAEC,cAAe,MAC3D,yBAAKF,UAAU,OACb,yBAAKA,UAAU,sBACb,yBACEG,IAAKN,EACLO,IAAI,MACJH,MAAO,CAAEI,QAAS,QAASC,OAAQ,WAGvC,yBAAKN,UAAU,sBACb,4BAAKJ,GACL,6BACA,4BAAKF,EAAOK,GAASQ,MAAM,EAAG,KAEhC,yBAAKP,UAAU,sBACb,4BACEA,UAAU,4BACVQ,QAAS,kBAAMV,EAAUH,KAF3B,sB,+KCnBV,IAAMc,EAAYC,IAAH,KAgCAC,EArBG,SAAC,GAAD,IAAGb,EAAH,EAAGA,UAAH,OAChB,kBAAC,IAAD,CAAOc,MAAOH,IACX,YAA+B,IAA5BI,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClB,OAAIF,EAAgB,2CAChBC,GAAOE,QAAQC,IAAIH,GAErB,kBAAC,WAAD,KACGC,EAAKG,QAAQC,KAAI,SAAAzB,GAAM,OACtB,kBAAC,EAAD,CACE0B,IAAK1B,EAAOC,SACZD,OAAQA,EACRI,UAAWA,EACXC,QAAQ,sB,gLCvBtB,IAAMsB,EAAYX,IAAH,KAgCAY,EArBI,SAAC,GAAD,IAAGxB,EAAH,EAAGA,UAAH,OACjB,kBAAC,IAAD,CAAOc,MAAOS,IACX,YAA+B,IAA5BR,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClB,OAAIF,EAAgB,2CAChBC,GAAOE,QAAQC,IAAIH,GAErB,kBAAC,WAAD,KACGC,EAAKQ,QAAQJ,KAAI,SAAAzB,GAAM,OACtB,kBAAC,EAAD,CACE0B,IAAK1B,EAAOC,SACZD,OAAQA,EACRI,UAAWA,EACXC,QAAQ,uB,iLCvBtB,IAAMyB,EAAYd,IAAH,KAgCAe,EArBK,SAAC,GAAD,IAAG3B,EAAH,EAAGA,UAAH,OAClB,kBAAC,IAAD,CAAOc,MAAOY,IACX,YAA+B,IAA5BX,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClB,OAAIF,EAAgB,2CAChBC,GAAOE,QAAQC,IAAIH,GAErB,kBAAC,WAAD,KACGC,EAAKW,QAAQP,KAAI,SAAAzB,GAAM,OACtB,kBAAC,EAAD,CACE0B,IAAK1B,EAAOC,SACZD,OAAQA,EACRI,UAAWA,EACXC,QAAQ,wB,uYCxBtB,IAAM4B,EAAejB,IAAH,KAkIHkB,EA9GA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,WACpB,OACE,kBAAC,IAAD,CAAOlB,MAAOe,EAAcI,UAAW,CAAEpC,SAAUkC,KAChD,YAA+B,IAA5BhB,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAElB,OADID,GAAOE,QAAQC,IAAIH,GACnBD,EAEA,yBAAKb,UAAU,QAAQC,MAAO,CAAEI,QAAS,SACvC,yBAAKL,UAAU,eAAegC,KAAK,YACjC,yBAAKhC,UAAU,iBACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,eAAd,kBACA,4BACEiC,KAAK,SACLjC,UAAU,QACVkC,eAAa,QACbC,aAAW,QACX3B,QAASsB,KAGb,yBAAK9B,UAAU,cACb,2CAEF,yBAAKA,UAAU,gBACb,4BACEiC,KAAK,SACLjC,UAAU,oBACVkC,eAAa,QACb1B,QAASsB,GAJX,aAcV,yBAAK9B,UAAU,QAAQC,MAAO,CAAEI,QAAS,SACvC,yBAAKL,UAAU,eAAegC,KAAK,YACjC,yBAAKhC,UAAU,iBACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,eACXe,EAAKrB,OAAO0C,eAAexC,QAE9B,4BACEqC,KAAK,SACLjC,UAAU,QACVkC,eAAa,QACbC,aAAW,QACX3B,QAASsB,KAGb,yBAAK9B,UAAU,cACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,sBACb,yBACEG,IAAKY,EAAKrB,OAAO0C,eAAeC,WAChCjC,IAAI,MACJH,MAAO,CAAEI,QAAS,QAASC,OAAQ,YAGvC,yBAAKN,UAAU,2BACb,2CACoBe,EAAKrB,OAAO0C,eAAeE,WAE/C,8CACuBvB,EAAKrB,OAAO0C,eAAe9B,QAElD,8CACuBS,EAAKrB,OAAO0C,eAAeG,QAElD,+CAEGxB,EAAKrB,OAAO0C,eAAeI,aAIlC,6BACA,yBAAKxC,UAAU,cACb,2CACoBe,EAAKrB,OAAO+C,iBAAiBC,UAEjD,2CACoB3B,EAAKrB,OAAO+C,iBAAiBE,WAEjD,2CACoB5B,EAAKrB,OAAO+C,iBAAiBG,cAIrD,yBAAK5C,UAAU,gBACb,4BACEiC,KAAK,SACLjC,UAAU,oBACVkC,eAAa,QACb1B,QAASsB,GAJX,iBC1CHe,E,2MAlEbC,MAAQ,CACNC,QAAQ,EACRC,SAAS,EACTC,UAAU,EACVtD,SAAU,M,EAEZuD,UAAY,SAAAC,GACV,IAAIC,EAAW,CACbL,QAAQ,EACRC,SAAS,EACTC,UAAU,GAEZG,EAASD,IAAO,EAChB,EAAKE,SAASD,I,EAEhBtD,UAAY,SAAA+B,GACV,EAAKwB,SAAS,CAAE1D,SAAUkC,K,EAE5BC,WAAa,WACX,EAAKuB,SAAS,CAAE1D,SAAU,Q,wEAElB,IAAD,SACyC2D,KAAKR,MAA7CnD,EADD,EACCA,SAAUoD,EADX,EACWA,OAAQC,EADnB,EACmBA,QAASC,EAD5B,EAC4BA,SACnC,OACE,yBAAKjD,UAAU,gBACb,yBAAKA,UAAU,YAAYgC,KAAK,QAAQG,aAAW,iBACjD,4BACEF,KAAK,SACLjC,UAAWuD,IAAW,oBAAqB,CAAEC,OAAQT,IACrDvC,QAAS,kBAAM,EAAK0C,UAAU,YAHhC,UAOA,4BACEjB,KAAK,SACLzB,QAAS,kBAAM,EAAK0C,UAAU,YAC9BlD,UAAWuD,IAAW,oBAAqB,CAAEC,OAAQR,KAHvD,WAOA,4BACEf,KAAK,SACLzB,QAAS,kBAAM,EAAK0C,UAAU,aAC9BlD,UAAWuD,IAAW,oBAAqB,CAAEC,OAAQP,KAHvD,aAQF,wBAAIjD,UAAU,QACX+C,EACG,kBACAC,EACA,mBACA,qBAELD,EAAS,kBAAC,EAAD,CAAWjD,UAAWwD,KAAKxD,YAAgB,KACpDkD,EAAU,kBAAC,EAAD,CAAYlD,UAAWwD,KAAKxD,YAAgB,KACtDmD,EAAW,kBAAC,EAAD,CAAanD,UAAWwD,KAAKxD,YAAgB,KACxDH,EACC,kBAAC,EAAD,CAAQkC,GAAIlC,EAAUmC,WAAYwB,KAAKxB,aACrC,U,GA7DO2B,a,yBCCbC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,aAmBQC,MAhBf,WACE,OACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,kBAAC,IAAD,KACE,yBAAK1D,UAAU,iBACb,gCACE,yBAAKG,IAAK2D,IAAM1D,IAAI,aACpB,mDAEF,kBAAC,IAAD,CAAO2D,OAAK,EAACC,KAAK,IAAIC,UAAWpB,QCTvBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.10dbf077.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nba_logo.7a1cebf5.png\";","import React from 'react';\n\nconst RankItem = ({\n  player,\n  player: { playerId, enName, pic },\n  openModal,\n  numName\n}) => {\n  return (\n    <div className='card card-body mb-4' style={{ paddingBottom: '0' }}>\n      <div className='row'>\n        <div className='col-md-4 col-sm-12'>\n          <img\n            src={pic}\n            alt='pic'\n            style={{ display: 'block', height: '100%' }}\n          />\n        </div>\n        <div className='col-md-5 col-sm-12'>\n          <h5>{enName}</h5>\n          <br />\n          <h2>{player[numName].slice(0, 4)}</h2>\n        </div>\n        <div className='col-md-3 col-sm-12'>\n          <button\n            className='btn btn-secondary my-auto'\n            onClick={() => openModal(playerId)}\n          >\n            Player Details\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RankItem;\n","import React, { Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport RankItem from './RankItem';\n\nconst PPG_QUERY = gql`\n  query ppgQuery {\n    ppgRank {\n      playerId\n      enName\n      pic\n      pointsPG\n    }\n  }\n`;\n\nconst PointRank = ({ openModal }) => (\n  <Query query={PPG_QUERY}>\n    {({ loading, error, data }) => {\n      if (loading) return <h4>Loading...</h4>;\n      if (error) console.log(error);\n      return (\n        <Fragment>\n          {data.ppgRank.map(player => (\n            <RankItem\n              key={player.playerId}\n              player={player}\n              openModal={openModal}\n              numName='pointsPG'\n            />\n          ))}\n        </Fragment>\n      );\n    }}\n  </Query>\n);\n\nexport default PointRank;\n","import React, { Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport RankItem from './RankItem';\n\nconst APG_QUERY = gql`\n  query apgQuery {\n    apgRank {\n      playerId\n      enName\n      pic\n      assistsPG\n    }\n  }\n`;\n\nconst AssistRank = ({ openModal }) => (\n  <Query query={APG_QUERY}>\n    {({ loading, error, data }) => {\n      if (loading) return <h4>Loading...</h4>;\n      if (error) console.log(error);\n      return (\n        <Fragment>\n          {data.apgRank.map(player => (\n            <RankItem\n              key={player.playerId}\n              player={player}\n              openModal={openModal}\n              numName='assistsPG'\n            />\n          ))}\n        </Fragment>\n      );\n    }}\n  </Query>\n);\n\nexport default AssistRank;\n","import React, { Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport RankItem from './RankItem';\n\nconst RPG_QUERY = gql`\n  query rpgQuery {\n    rpgRank {\n      playerId\n      enName\n      pic\n      reboundsPG\n    }\n  }\n`;\n\nconst ReboundRank = ({ openModal }) => (\n  <Query query={RPG_QUERY}>\n    {({ loading, error, data }) => {\n      if (loading) return <h4>Loading...</h4>;\n      if (error) console.log(error);\n      return (\n        <Fragment>\n          {data.rpgRank.map(player => (\n            <RankItem\n              key={player.playerId}\n              player={player}\n              openModal={openModal}\n              numName='reboundsPG'\n            />\n          ))}\n        </Fragment>\n      );\n    }}\n  </Query>\n);\n\nexport default ReboundRank;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst PLAYER_QUERY = gql`\n  query plaryQuery($playerId: String!) {\n    player(playerId: $playerId) {\n      playerBaseInfo {\n        enName\n        birthDate\n        height\n        weight\n        jerseyNum\n        picFromSIB\n      }\n      playerSeasonStat {\n        pointsPG\n        assistsPG\n        reboundsPG\n      }\n    }\n  }\n`;\n\nconst Player = ({ id, closeModal }) => {\n  return (\n    <Query query={PLAYER_QUERY} variables={{ playerId: id }}>\n      {({ loading, error, data }) => {\n        if (error) console.log(error);\n        if (loading)\n          return (\n            <div className='modal' style={{ display: 'flex' }}>\n              <div className='modal-dialog' role='document'>\n                <div className='modal-content'>\n                  <div className='modal-header'>\n                    <h5 className='modal-title'>Player Details</h5>\n                    <button\n                      type='button'\n                      className='close'\n                      data-dismiss='modal'\n                      aria-label='Close'\n                      onClick={closeModal}\n                    ></button>\n                  </div>\n                  <div className='modal-body'>\n                    <h3>loading...</h3>\n                  </div>\n                  <div className='modal-footer'>\n                    <button\n                      type='button'\n                      className='btn btn-secondary'\n                      data-dismiss='modal'\n                      onClick={closeModal}\n                    >\n                      Close\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        return (\n          <div className='modal' style={{ display: 'flex' }}>\n            <div className='modal-dialog' role='document'>\n              <div className='modal-content'>\n                <div className='modal-header'>\n                  <h5 className='modal-title'>\n                    {data.player.playerBaseInfo.enName}\n                  </h5>\n                  <button\n                    type='button'\n                    className='close'\n                    data-dismiss='modal'\n                    aria-label='Close'\n                    onClick={closeModal}\n                  ></button>\n                </div>\n                <div className='modal-body'>\n                  <div className='row'>\n                    <div className='col-md-6 col-sm-12'>\n                      <img\n                        src={data.player.playerBaseInfo.picFromSIB}\n                        alt='pic'\n                        style={{ display: 'block', height: '150px' }}\n                      />\n                    </div>\n                    <div className='col-md-6 px-5 col-sm-12'>\n                      <p>\n                        DOB: &nbsp;&nbsp;{data.player.playerBaseInfo.birthDate}\n                      </p>\n                      <p>\n                        Height: &nbsp;&nbsp;{data.player.playerBaseInfo.height}\n                      </p>\n                      <p>\n                        weight: &nbsp;&nbsp;{data.player.playerBaseInfo.weight}\n                      </p>\n                      <p>\n                        Jersey#: &nbsp;&nbsp;\n                        {data.player.playerBaseInfo.jerseyNum}\n                      </p>\n                    </div>\n                  </div>\n                  <hr />\n                  <div className='px-2 stats'>\n                    <p>\n                      PPG: &nbsp;&nbsp;{data.player.playerSeasonStat.pointsPG}\n                    </p>\n                    <p>\n                      APG: &nbsp;&nbsp;{data.player.playerSeasonStat.assistsPG}\n                    </p>\n                    <p>\n                      RPG: &nbsp;&nbsp;{data.player.playerSeasonStat.reboundsPG}\n                    </p>\n                  </div>\n                </div>\n                <div className='modal-footer'>\n                  <button\n                    type='button'\n                    className='btn btn-secondary'\n                    data-dismiss='modal'\n                    onClick={closeModal}\n                  >\n                    Close\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default Player;\n","import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport PointRank from './Points';\nimport AssistRank from './Assists';\nimport ReboundRank from './Rebounds';\nimport Player from 'components/Player/Player';\n\nclass Rank extends Component {\n  state = {\n    points: true,\n    assists: false,\n    rebounds: false,\n    playerId: null\n  };\n  changeTab = tab => {\n    let newState = {\n      points: false,\n      assists: false,\n      rebounds: false\n    };\n    newState[tab] = true;\n    this.setState(newState);\n  };\n  openModal = id => {\n    this.setState({ playerId: id });\n  };\n  closeModal = () => {\n    this.setState({ playerId: null });\n  };\n  render() {\n    const { playerId, points, assists, rebounds } = this.state;\n    return (\n      <div className='Ranking mt-5'>\n        <div className='btn-group' role='group' aria-label='Basic example'>\n          <button\n            type='button'\n            className={classnames('btn btn-secondary', { active: points })}\n            onClick={() => this.changeTab('points')}\n          >\n            Points\n          </button>\n          <button\n            type='button'\n            onClick={() => this.changeTab('assists')}\n            className={classnames('btn btn-secondary', { active: assists })}\n          >\n            Assists\n          </button>\n          <button\n            type='button'\n            onClick={() => this.changeTab('rebounds')}\n            className={classnames('btn btn-secondary', { active: rebounds })}\n          >\n            Rebounds\n          </button>\n        </div>\n        <h3 className='my-5'>\n          {points\n            ? 'Points Per Game'\n            : assists\n            ? 'Assists Per Game'\n            : 'Rebounds Per Game'}\n        </h3>\n        {points ? <PointRank openModal={this.openModal} /> : null}\n        {assists ? <AssistRank openModal={this.openModal} /> : null}\n        {rebounds ? <ReboundRank openModal={this.openModal} /> : null}\n        {playerId ? (\n          <Player id={playerId} closeModal={this.closeModal} />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default Rank;\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport Rank from 'components/Rank/Rank';\nimport './App.scss';\nimport logo from './nba_logo.png';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className='App container'>\n          <header>\n            <img src={logo} alt='NBA Logo' />\n            <h1>NBA Stats Rankings</h1>\n          </header>\n          <Route exact path='/' component={Rank} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}